rt <- .x %>% dplyr::mutate(Retain = retain(.x, make_decision = "mini"))
#cbind(.x, Retain = rt)
})
)
return(tidyr::unnest(brokenR))
})
fcs_files_data <- map2(.x = metafiles[2:length(metafiles)], .y = meta_files_data,
function(.x, .y) {
Retained <- .y %>% dplyr::filter(Retain == "Retain")
inside <- list.files(.x, full.names = T)
fcs.ext <- which(tools::file_ext(inside) == "fcs" )
fcs.toberead <- inside[fcs.ext]
fcs.files <- lapply(1:nrow(Retained), function(i) {
fcs_data <- read.FCS(fcs.toberead[Retained$File1[i]],
alter.names = TRUE,
transformation = FALSE,
emptyValue = FALSE,
dataset = Retained$Sample.Number[i])
})
keys <- sapply(fcs.files, keyword, "GTI$SAMPLEID")
names(fcs.files) <- keys
as(fcs.files, "flowSet")
})
names(fcs_files_data) <- nms
flowTrans::flowTrans(fcs_files_data$`02.04.2019`[[1]][, 1:3], "mclMultivArcSinh")
install.packages("IDPmisc")
flowTrans::flowTrans(fcs_files_data$`02.04.2019`[[1]][, 1:3], "mclMultivArcSinh")
flowTrans::flowTrans(fcs_files_data$`02.04.2019`[[1]]@exprs[, 1:3], "mclMultivArcSinh")
#getting the total number of particles counted by the flow cytometer
Full_Particle_Count <- lapply(fcs_files_data, function(x) {
fsApply(x ,nrow)
})
#removing NAs in the expression matrix
NonNas <- lapply(fcs_files_data, function (x) {
fsApply(x, function (y) {
nona(y)
})
})
#filtering out the positive values. This is only important if
#one plans to use log-transformation
NonNegatives <- lapply(NonNas, function (x) {
fsApply(x, function (y) {
noneg(y)
})
})
#log Transformation
log_transformedSet <- lapply(NonNegatives, function(x, ntt) {
fsApply(x, function (y, ntt2) {
lnTrans(y, notToTransform = ntt2)
},ntt2 = ntt)
}, ntt = c("TIME"))
flowTrans::flowTrans(NonNas$`02.04.2019`[[1]][, 1:3], "mclMultivArcSinh")
flowTrans::flowTrans(NonNas$`02.04.2019`[[1]][, 1:3], "mclMultivArcSinh", n2f = F, parameters.only = F)
library(flowTrans)
test <- flowTrans(NonNas$`02.04.2019`[[1]][, 1:3], "mclMultivArcSinh", n2f = F, parameters.only = F)
test <- flowTrans(dat = NonNas$`02.04.2019`[[1]][, 1:3], "mclMultivArcSinh", dims = c("RED.B.HLin", "YEL.B.HLin"), n2f = F, parameters.only = F)
test <- flowTrans(dat = NonNas$`02.04.2019`[[1]], "mclMultivArcSinh", dims = c("RED.B.HLin", "YEL.B.HLin"), n2f = F, parameters.only = F)
test <- flowTrans(dat = NonNas$`02.04.2019`[[1]], "mclMultivArcSinh", dims = c("SSC.ALin", "FSC.HLin", "SSC.HLin", "SSC.W", "FSC.HLin", "RED.B.HLin", "YEL.B.HLin"), n2f = F, parameters.only = F)
NonNas$`02.04.2019`
NonNas$`02.04.2019`[[1]]
test <- flowTrans(dat = NonNas$`02.04.2019`[[1]], "mclMultivArcSinh", dims = c("SSC.ALin", "SSC.HLin", "SSC.W", "FSC.HLin", "RED.B.HLin", "YEL.B.HLin"), n2f = F, parameters.only = F)
test <- flowTrans(dat = NonNas$`02.04.2019`[[1]], "mclMultivArcSinh", dims = c("RED.R.HLin", "SSC.W", "FSC.HLin", "RED.B.HLin", "YEL.B.HLin"), n2f = F, parameters.only = F)
test <- flowTrans(dat = NonNas$`02.04.2019`[[1]], "mclMultivBiexp", dims = c("RED.R.HLin", "SSC.W", "FSC.HLin", "RED.B.HLin", "YEL.B.HLin"), n2f = F, parameters.only = F)
test <- flowTrans(dat = NonNas$`02.04.2019`[[1]], "mclMultivArcSinh", dims = c("RED.R.HLin", "SSC.W", "FSC.HLin", "RED.B.HLin", "YEL.B.HLin"), n2f = F, parameters.only = F)
plotDens(test$result, c("RED.R.HLin", "SSC.W"))
flowDensity::plotDens(test$result, c("RED.R.HLin", "SSC.W"))
install.packages("caTools")
flowDensity::plotDens(test$result, c("RED.R.HLin", "SSC.W"))
install.packages("data.table")
flowDensity::plotDens(test$result, c("RED.R.HLin", "SSC.W"))
install.packages("zip")
flowDensity::plotDens(test$result, c("RED.R.HLin", "SSC.W"))
install.packages("spam")
flowDensity::plotDens(test$result, c("RED.R.HLin", "SSC.W"))
BiocManager::install("flowWorkspace")
flowDensity::plotDens(test$result, c("RED.R.HLin", "SSC.W"))
flowDensity::plotDens(test$result, c("RED.R.HLin", "YEL.B.HLin"))
flowDensity::plotDens(log_transformedSet$`02.04.2019`[[1]], c("RED.R.HLin", "YEL.B.HLin"))
pair_plot(NonNas)
pair_plot(NonNas$`02.04.2019`[[1]])
pair_plot(test$result)
pair_plot(log_transformedSet$`02.04.2019`[[1]])
pair_plot(log_transformedSet$`02.04.2019`[[27]])
pair_plot(log_transformedSet$`02.04.2019`[[26]])
hist(log_transformedSet$`02.04.2019`[[26]][, "RED.B.HLin"])
hist(log_transformedSet$`02.04.2019`[[26]]@exprs[, "RED.B.HLin"])
plot(density(log_transformedSet$`02.04.2019`[[26]]@exprs[, "RED.B.HLin"]))
plot(density(log_transformedSet$`02.04.2019`[[26]]@exprs[, "RED.R.HLin"]))
flowDensity::plotDens(log_transformedSet$`02.04.2019`[[1]], c("RED.R.HLin", "YEL.B.HLin"))
flowDensity::plotDens(log_transformedSet$`02.04.2019`[[26]], c("RED.R.HLin", "YEL.B.HLin"))
flowDensity::plotDens(log_transformedSet$`02.04.2019`[[26]], c("RED.B.HLin", "YEL.B.HLin"))
flowDensity::plotDens(test$result, c("RED.B.HLin", "YEL.B.HLin"))
test2 <- flowTrans(dat = NonNas$`02.04.2019`[[26]], "mclMultivArcSinh", dims = c("RED.R.HLin", "SSC.W", "FSC.HLin", "RED.B.HLin", "YEL.B.HLin"), n2f = F, parameters.only = F)
flowDensity::plotDens(test2$result, c("RED.B.HLin", "YEL.B.HLin"))
flowDensity::plotDens(test2$result, c("RED.R.HLin", "YEL.B.HLin"))
arcsin_transformedSet <- lapply(x, function(x) {
fsApply(y, function(y, toTrans) {
flowTrans(y, "mclMultivArcSinh", dims = toTrans, n2f = F, parameters.only = F)$result
}, toTrans = c("RED.R.HLin", "SSC.W", "FSC.HLin", "RED.B.HLin", "YEL.B.HLin"))
})
arcsin_transformedSet <- lapply(NonNas, function(x) {
fsApply(y, function(y, toTrans) {
flowTrans(y, "mclMultivArcSinh", dims = toTrans, n2f = F, parameters.only = F)$result
}, toTrans = c("RED.R.HLin", "SSC.W", "FSC.HLin", "RED.B.HLin", "YEL.B.HLin"))
})
arcsin_transformedSet <- lapply(NonNas, function(x) {
fsApply(x, function(y, toTrans) {
flowTrans(y, "mclMultivArcSinh", dims = toTrans, n2f = F, parameters.only = F)$result
}, toTrans = c("RED.R.HLin", "SSC.W", "FSC.HLin", "RED.B.HLin", "YEL.B.HLin"))
})
pair_plot(NonNas$`02.04.2019`[[1]])
pair_plot(log_transformedSet$`02.04.2019`[[1]])
View(meta_files_data$`12.04.2019`)
fcs_files_data <- map2(.x = metafiles[2:length(metafiles)], .y = meta_files_data,
function(.x, .y) {
Retained <- .y %>% dplyr::filter(Retain == "Retain")
inside <- list.files(.x, full.names = T)
fcs.ext <- which(tools::file_ext(inside) == "fcs" )
fcs.toberead <- inside[fcs.ext]
fcs.files <- lapply(1:nrow(Retained), function(i) {
fcs_data <- read.FCS(fcs.toberead[Retained$File1[i]],
alter.names = TRUE,
transformation = FALSE,
emptyValue = FALSE,
dataset = Retained$Sample.Number[i])
})
#keys <- sapply(fcs.files, keyword, "GTI$SAMPLEID")
names(fcs.files) <- Retained$Sample.ID2
as(fcs.files, "flowSet")
})
names(fcs_files_data) <- nms
fcs_files_data$`02.04.2019`[[1]]
?flowSet
pData(phenoData(fcs_files_data$`02.04.2019`))
pData(phenoData(fcs_files_data$`09.04.2019`))
logtrans_margin <- lapply(log_transformedSet[1], function(x) {
dlist <- fsApply(x, function(y, ch, typ){
cellmargin(y, Channel = ch, type = "estimate")$reducedflowframe
}, ch = "SSC.W")
})
logtrans_margin <- lapply(arcsin_transformedSet[1], function(x) {
dlist <- fsApply(x, function(y, ch, typ){
cellmargin(y, Channel = ch, type = "estimate")$reducedflowframe
}, ch = "SSC.W")
})
log_transformedSet <- lapply(NonNegatives, function(x, ntt) {
fsApply(x, function (y, ntt2) {
lnTrans(y, notToTransform = ntt2)
},ntt2 = ntt)
}, ntt = c("SSC.W", "TIME"))
pair_plot(log_transformedSet$`02.04.2019`[[1]])
logtrans_margin <- lapply(log_transformedSet, function(x) {
dlist <- fsApply(x, function(y, ch, typ){
cellmargin(y, Channel = ch, type = "estimate")$reducedflowframe
}, ch = "SSC.W")
})
logtrans_margin <- lapply(log_transformedSet[1], function(x) {
dlist <- fsApply(x, function(y, ch, typ){
cellmargin(y, Channel = ch, type = "estimate")$reducedflowframe
}, ch = "SSC.W")
})
logtrans_margin$`02.04.2019`[[13]]
logtrans_margin <- lapply(log_transformedSet[2], function(x) {
dlist <- fsApply(x, function(y, ch, typ){
cellmargin(y, Channel = ch, type = "estimate")$reducedflowframe
}, ch = "SSC.W")
})
logtrans_margin <- lapply(log_transformedSet, function(x) {
dlist <- fsApply(x, function(y, ch, typ){
cellmargin(y, Channel = ch, type = "estimate")$reducedflowframe
}, ch = "SSC.W")
})
library(flowCore)
#library(flowDensity)
library(tidyverse)
library(stringr)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
#source("Functions/distances.R")
source("../../cyanoFilter/R/good_measurement.R")
source("../../cyanoFilter/R/retain.R")
source("../../cyanoFilter/R/lnTrans.R")
source("../../cyanoFilter/R/nona.R")
source("../../cyanoFilter/R/noneg.R")
source("../../cyanoFilter/R/plotting_functions.R")
#source("../../cyanoFilter/R/cell_debris.R")
#source("../../cyanoFilter/R/cell_debris_nc.R")
source("../../cyanoFilter/R/debris_nc.R")
source("../../cyanoFilter/R/debris_c.R")
source("../../cyanoFilter/R/bs4_nc.R")
source("../../cyanoFilter/R/bs4_c.R")
source("../../cyanoFilter/R/debris_invasion_nc.R")
source("../../cyanoFilter/R/bs4_invasion_c.R")
source("../../cyanoFilter/R/bs5_c.R")
source("../../cyanoFilter/R/bs5_nc.R")
source("../../cyanoFilter/R/bs5_invasion_c.R")
source("../../cyanoFilter/R/bs5_invasion_nc.R")
source("../../cyanoFilter/R/Margin_Cells.R")
#list all folders in the Cytometer Data folder
metafiles <- list.dirs("../Cytometer Data")
nms <- sapply(str_split(metafiles[2:length(metafiles)], "/"), "[[", 3)
#reading in all meta data file and determining their status
meta_files_data <- lapply(metafiles[2:length(metafiles)], function(x) {
inside <- list.files(x, full.names = T)
#all csv files without the word GroupStats
csv.ext <- which(tools::file_ext(inside) == "csv" &
!str_detect(inside, "GroupStats"))
csv.toberead <- inside[csv.ext]
if(length(csv.ext) == 1) {
metadata <- read.csv(csv.toberead, skip = 7,
stringsAsFactors = F,
check.names = T)
metadata <- metadata[, 1:65]
#clean up the Cells.muL column
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
metadata$File <- 1
} else if (length(csv.ext) > 1) {
metadatas <- lapply(1:length(csv.toberead), function(i) {
ddata <- read.csv(csv.toberead[i], skip = 7, stringsAsFactors = F, check.names = T)
ddata <- ddata[, 1:65]
ddata$File <- i
return(ddata)
})
metadata <- do.call(rbind.data.frame, metadatas)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
}
return(metadata)
})
names(meta_files_data) <- nms
meta_files_data <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
brokenR <- broken %>% dplyr::mutate(Retains = purrr::map(broken$data, function(.x) {
rt <- .x %>% dplyr::mutate(Retain = retain(.x, make_decision = "mini"))
#cbind(.x, Retain = rt)
})
)
return(tidyr::unnest(brokenR))
})
fcs_files_data <- map2(.x = metafiles[2:length(metafiles)], .y = meta_files_data,
function(.x, .y) {
Retained <- .y %>% dplyr::filter(Retain == "Retain")
inside <- list.files(.x, full.names = T)
fcs.ext <- which(tools::file_ext(inside) == "fcs" )
fcs.toberead <- inside[fcs.ext]
fcs.files <- lapply(1:nrow(Retained), function(i) {
fcs_data <- read.FCS(fcs.toberead[Retained$File1[i]],
alter.names = TRUE,
transformation = FALSE,
emptyValue = FALSE,
dataset = Retained$Sample.Number[i])
})
#keys <- sapply(fcs.files, keyword, "GTI$SAMPLEID")
names(fcs.files) <- Retained$Sample.ID2
as(fcs.files, "flowSet")
})
names(fcs_files_data) <- nms
pnames <- pData(phenoData(fcs_files_data$`02.04.2019`))
#getting the total number of particles counted by the flow cytometer
Full_Particle_Count <- lapply(fcs_files_data, function(x) {
fsApply(x ,nrow)
})
#removing NAs in the expression matrix
NonNas <- lapply(fcs_files_data, function (x) {
fsApply(x, function (y) {
nona(y)
})
})
### ArcSinh Transformation
#arcsin_transformedSet <- lapply(NonNas, function(x) {
#  fsApply(x, function(y, toTrans) {
#    flowTrans(y, "mclMultivArcSinh", dims = toTrans, n2f = F, parameters.only = F)$result
#  }, toTrans = c("RED.R.HLin", "FSC.HLin", "RED.B.HLin", "YEL.B.HLin"))
#})
#filtering out the positive values. This is only important if
#one plans to use log-transformation
NonNegatives <- lapply(NonNas, function (x) {
fsApply(x, function (y) {
noneg(y)
})
})
### log Transformation
log_transformedSet <- lapply(NonNegatives, function(x, ntt) {
fsApply(x, function (y, ntt2) {
lnTrans(y, notToTransform = ntt2)
},ntt2 = ntt)
}, ntt = c("SSC.W", "TIME"))
logtrans_margin <- lapply(log_transformedSet, function(x) {
dlist <- fsApply(x, function(y, ch, typ){
cellmargin(y, Channel = ch, type = "estimate")$reducedflowframe
}, ch = "SSC.W")
})
lapply(logtrans_margin$`02.04.2019`, function(x) {
fsApply(x, function(y) {
debris_nc(y, p1 = "RED.B.HLin", "YEL.B.HLin")
})
})
lapply(logtrans_margin[1], function(x) {
fsApply(x, function(y) {
debris_nc(y, p1 = "RED.B.HLin", "YEL.B.HLin")
})
})
lapply(logtrans_margin[2], function(x) {
fsApply(x, function(y) {
debris_nc(y, p1 = "RED.B.HLin", "YEL.B.HLin")
})
})
?str_detect
lapply(logtrans_margin[1], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
lapply(logtrans_margin[2], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
lapply(logtrans_margin[1], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
lapply(logtrans_margin[2], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
lapply(logtrans_margin[3], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
lapply(logtrans_margin[4], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
lapply(logtrans_margin[6], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
lapply(logtrans_margin[4], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
meta_files_data <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
brokenR <- broken %>% dplyr::mutate(Retains = purrr::map(broken$data, function(.x) {
rt <- .x %>% dplyr::mutate(Retain = retain(.x, make_decision = "maxi"))
#cbind(.x, Retain = rt)
})
)
return(tidyr::unnest(brokenR))
})
fcs_files_data <- map2(.x = metafiles[2:length(metafiles)], .y = meta_files_data,
function(.x, .y) {
Retained <- .y %>% dplyr::filter(Retain == "Retain")
inside <- list.files(.x, full.names = T)
fcs.ext <- which(tools::file_ext(inside) == "fcs" )
fcs.toberead <- inside[fcs.ext]
fcs.files <- lapply(1:nrow(Retained), function(i) {
fcs_data <- read.FCS(fcs.toberead[Retained$File1[i]],
alter.names = TRUE,
transformation = FALSE,
emptyValue = FALSE,
dataset = Retained$Sample.Number[i])
})
#keys <- sapply(fcs.files, keyword, "GTI$SAMPLEID")
names(fcs.files) <- Retained$Sample.ID2
as(fcs.files, "flowSet")
})
names(fcs_files_data) <- nms
pnames <- pData(phenoData(fcs_files_data$`02.04.2019`))
#getting the total number of particles counted by the flow cytometer
Full_Particle_Count <- lapply(fcs_files_data, function(x) {
fsApply(x ,nrow)
})
#removing NAs in the expression matrix
NonNas <- lapply(fcs_files_data, function (x) {
fsApply(x, function (y) {
nona(y)
})
})
### ArcSinh Transformation
#arcsin_transformedSet <- lapply(NonNas, function(x) {
#  fsApply(x, function(y, toTrans) {
#    flowTrans(y, "mclMultivArcSinh", dims = toTrans, n2f = F, parameters.only = F)$result
#  }, toTrans = c("RED.R.HLin", "FSC.HLin", "RED.B.HLin", "YEL.B.HLin"))
#})
#filtering out the positive values. This is only important if
#one plans to use log-transformation
NonNegatives <- lapply(NonNas, function (x) {
fsApply(x, function (y) {
noneg(y)
})
})
### log Transformation
log_transformedSet <- lapply(NonNegatives, function(x, ntt) {
fsApply(x, function (y, ntt2) {
lnTrans(y, notToTransform = ntt2)
},ntt2 = ntt)
}, ntt = c("SSC.W", "TIME"))
logtrans_margin <- lapply(log_transformedSet, function(x) {
dlist <- fsApply(x, function(y, ch, typ){
cellmargin(y, Channel = ch, type = "estimate")$reducedflowframe
}, ch = "SSC.W")
})
lapply(logtrans_margin[4], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_inc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
lapply(logtrans_margin[3], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_inc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
View(meta_files_data$`12.04.2019`)
lapply(logtrans_margin[2], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_inc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
lapply(logtrans_margin[3], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_inc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
lapply(logtrans_margin[6], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_inc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
lapply(logtrans_margin[7], function(x) {
fsApply(x, function(y) {
if(str_detect(identifier(y), "B4") |  str_detect(identifier(y), "B5")) {
debris_nc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
} else {
debris_inc(y, p1 = "RED.B.HLin", p2 = "YEL.B.HLin")
}
})
})
rm(list = ls())
