metadata$Sample.ID2 <- unlist(id_names)
}
return(metadata)
})
rm(test, test2)
test <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
broken$Retain <- purrr::map(broken$data, function(.x) {
.x %>% retain(., make_decision = "mini")
})
return(broken)
})
test[[1]]
test[[1]]$Retain
test[[1]]$Sample.ID2
test[[2]]$Retain
metafiles
test[[3]]$Retain
test[[3]]$Sample.ID2
View(test[[2]])
View(meta_files_data[[1]])
View(meta_files_data[[2]])
View(meta_files_data[[3]])
View(meta_files_data[[3]])
View(test[[3]])
test[[3]]$data[23,]
View(test[[3]]$data[[23]])
source("../../cyanoFilter/R/retain.R")
test <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
broken$Retain <- purrr::map(broken$data, function(.x) {
.x %>% retain(., make_decision = "mini")
})
return(broken)
})
View(test[[3]])
View(test[[1]])
View(test[[2]])
View(test[[4]])
test <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
broken$Retain <- purrr::map(broken$data, function(.x) {
.x %>% retain(., make_decision = "mini")
})
return(tidyr::unnest(broken))
})
View(test[[2]])
test <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
broken %>% dplyr::mutate(Retains = purrr::map(broken$data, function(.x) {
.rt <- .x %>% retain(., make_decision = "mini")
cbind(.x, Retain = .rt)
})
)
return(broken)
})
View(test[[2]])
View(test[[2]]$data[[1]])
test <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
brokenR <- broken %>% dplyr::mutate(Retains = purrr::map(broken$data, function(.x) {
rt <- .x %>% retain(., make_decision = "mini")
cbind(.x, Retain = rt)
})
)
return(brokenR)
})
View(test[[2]]$data[[1]])
View(test[[2]])
View(test[[2]]$Retains[[1]])
View(test[[1]]$Retains[[1]])
test <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
brokenR <- broken %>% dplyr::mutate(Retains = purrr::map(broken$data, function(.x) {
rt <- .x %>% retain(., make_decision = "mini")
cbind(.x, Retain = rt)
})
)
return(tidyr::unnest(brokenR))
})
View(test[[1]])
warnings()[1:4]
library(flowCore)
library(flowDensity)
library(flowDensity)
library(tidyverse)
library(stringr)
source("../../cyanoFilter/R/good_measurement.R")
source("../../cyanoFilter/R/retain.R")
source("../../cyanoFilter/R/lnTrans.R")
source("../../cyanoFilter/R/nona.R")
source("../../cyanoFilter/R/noneg.R")
source("../../cyanoFilter/R/plotting_functions.R")
#source("../../cyanoFilter/R/cell_debris.R")
#source("../../cyanoFilter/R/cell_debris_nc.R")
source("../../cyanoFilter/R/debris_nc.R")
source("../../cyanoFilter/R/debris_c.R")
source("../../cyanoFilter/R/bs4_nc.R")
source("../../cyanoFilter/R/bs4_c.R")
source("../../cyanoFilter/R/debris_invasion_nc.R")
source("../../cyanoFilter/R/bs4_invasion_c.R")
source("../../cyanoFilter/R/bs5_c.R")
source("../../cyanoFilter/R/bs5_nc.R")
source("../../cyanoFilter/R/bs5_invasion_c.R")
source("../../cyanoFilter/R/bs5_invasion_nc.R")
source("../../cyanoFilter/R/Margin_Cells.R")
#list all folders in the Cytometer Data folder
metafiles <- list.dirs("../Cytometer Data")
#reading in all meta data file and determining their status
meta_files_data <- lapply(metafiles[2:length(metafiles)], function(x) {
inside <- list.files(x, full.names = T)
csv.ext <- which(tools::file_ext(inside) == "csv" &
!str_detect(inside, "GroupStats"))
csv.toberead <- inside[csv.ext]
if(length(csv.ext) == 1) {
metadata <- read.csv(csv.toberead, skip = 7,
stringsAsFactors = F,
check.names = T)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
} else if (length(csv.ext) > 1) {
metadatas <- lapply(csv.toberead, read.csv, skip = 7,
stringsAsFactors = F,
check.names = T)
metadata <- do.call(rbind.data.frame, metadatas)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
}
return(metadata)
})
test <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
brokenR <- broken %>% dplyr::mutate(Retains = purrr::map(broken$data, function(.x) {
rt <- .x %>% retain(., make_decision = "mini")
cbind(.x, Retain = rt)
})
)
return(tidyr::unnest(brokenR))
})
View(test[[1]])
View(meta_files_data[[1]])
View(meta_files_data[[2]])
View(meta_files_data[[3]])
View(test[[3]])
length(unique(test[[1]]$Sample.Number))
length(unique(test[[3]]$Sample.Number))
meta_files_data <- lapply(metafiles[2:length(metafiles)], function(x) {
inside <- list.files(x, full.names = T)
csv.ext <- which(tools::file_ext(inside) == "csv" &
!str_detect(inside, "GroupStats"))
csv.toberead <- inside[csv.ext]
if(length(csv.ext) == 1) {
metadata <- read.csv(csv.toberead, skip = 7,
stringsAsFactors = F,
check.names = T)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
metadata$File <- csv.toberead
} else if (length(csv.ext) > 1) {
metadatas <- lapply(csv.toberead, read.csv, skip = 7,
stringsAsFactors = F,
check.names = T)
metadata <- do.call(rbind.data.frame, metadatas)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
}
return(metadata)
})
View(meta_files_data[[2]])
meta_files_data <- lapply(metafiles[2:length(metafiles)], function(x) {
inside <- list.files(x, full.names = T)
csv.ext <- which(tools::file_ext(inside) == "csv" &
!str_detect(inside, "GroupStats"))
csv.toberead <- inside[csv.ext]
if(length(csv.ext) == 1) {
metadata <- read.csv(csv.toberead, skip = 7,
stringsAsFactors = F,
check.names = T)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
metadata$File <- csv.toberead
} else if (length(csv.ext) > 1) {
metadatas <- lapply(csv.toberead, function(x) {
ddata <- read.csv(x, skip = 7, stringsAsFactors = F, check.names = T)
ddata$File <- x
return(ddata)
})
metadata <- do.call(rbind.data.frame, metadatas)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
}
return(metadata)
})
View(meta_files_data[[1]])
View(meta_files_data[[3]])
View(meta_files_data[[4]])
library(flowDensity)
install.packages("maps")
library(maps)
install.packages("maps")
library(flowCore)
library(flowDensity)
library(tidyverse)
library(stringr)
#list all folders in the Cytometer Data folder
metafiles <- list.dirs("../Cytometer Data")
#reading in all meta data file and determining their status
meta_files_data <- lapply(metafiles[2:length(metafiles)], function(x) {
inside <- list.files(x, full.names = T)
csv.ext <- which(tools::file_ext(inside) == "csv" &
!str_detect(inside, "GroupStats"))
csv.toberead <- inside[csv.ext]
if(length(csv.ext) == 1) {
metadata <- read.csv(csv.toberead, skip = 7,
stringsAsFactors = F,
check.names = T)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- first_names#str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
metadata$File <- csv.toberead
} else if (length(csv.ext) > 1) {
metadatas <- lapply(csv.toberead, function(x) {
ddata <- read.csv(x, skip = 7, stringsAsFactors = F, check.names = T)
ddata$File <- x
return(ddata)
})
metadata <- do.call(rbind.data.frame, metadatas)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
}
return(metadata)
})
source("../../cyanoFilter/R/good_measurement.R")
source("../../cyanoFilter/R/retain.R")
source("../../cyanoFilter/R/lnTrans.R")
source("../../cyanoFilter/R/nona.R")
source("../../cyanoFilter/R/noneg.R")
source("../../cyanoFilter/R/plotting_functions.R")
source("../../cyanoFilter/R/debris_nc.R")
source("../../cyanoFilter/R/debris_c.R")
source("../../cyanoFilter/R/bs4_nc.R")
source("../../cyanoFilter/R/bs4_c.R")
source("../../cyanoFilter/R/debris_invasion_nc.R")
source("../../cyanoFilter/R/bs4_invasion_c.R")
source("../../cyanoFilter/R/bs5_c.R")
source("../../cyanoFilter/R/bs5_nc.R")
source("../../cyanoFilter/R/bs5_invasion_c.R")
source("../../cyanoFilter/R/bs5_invasion_nc.R")
source("../../cyanoFilter/R/Margin_Cells.R")
#list all folders in the Cytometer Data folder
metafiles <- list.dirs("../Cytometer Data")
#reading in all meta data file and determining their status
meta_files_data <- lapply(metafiles[2:length(metafiles)], function(x) {
inside <- list.files(x, full.names = T)
csv.ext <- which(tools::file_ext(inside) == "csv" &
!str_detect(inside, "GroupStats"))
csv.toberead <- inside[csv.ext]
if(length(csv.ext) == 1) {
metadata <- read.csv(csv.toberead, skip = 7,
stringsAsFactors = F,
check.names = T)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- first_names#str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
metadata$File <- csv.toberead
} else if (length(csv.ext) > 1) {
metadatas <- lapply(csv.toberead, function(x) {
ddata <- read.csv(x, skip = 7, stringsAsFactors = F, check.names = T)
ddata$File <- x
return(ddata)
})
metadata <- do.call(rbind.data.frame, metadatas)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
}
return(metadata)
})
View(meta_files_data[[4]])
View(meta_files_data[[42])
View(meta_files_data[[2]])
#list all folders in the Cytometer Data folder
metafiles <- list.dirs("../Cytometer Data")
#reading in all meta data file and determining their status
meta_files_data <- lapply(metafiles[2:length(metafiles)], function(x) {
inside <- list.files(x, full.names = T)
csv.ext <- which(tools::file_ext(inside) == "csv" &
!str_detect(inside, "GroupStats"))
csv.toberead <- inside[csv.ext]
if(length(csv.ext) == 1) {
metadata <- read.csv(csv.toberead, skip = 7,
stringsAsFactors = F,
check.names = T)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- first_names#str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
metadata$File <- 1
} else if (length(csv.ext) > 1) {
metadatas <- lapply(1:length(csv.toberead), function(x) {
ddata <- read.csv(csv.toberead[x], skip = 7, stringsAsFactors = F, check.names = T)
ddata$File <- x
return(ddata)
})
metadata <- do.call(rbind.data.frame, metadatas)
names(metadata)[which(str_detect(names(metadata), "Cells."))] <- "CellspML"
first_names <- sapply(str_split(metadata$Sample.ID, "_"), "[[", 1)
metadata$Strain <- str_extract(first_names, "[4-5]")
metadata$Status <- goodfcs(metadata, mxd_cellpML = 1000, mnd_cellpML = 50)
id_names <- lapply(str_split(metadata$Sample.ID, "_"), function(x) {
nms <- ifelse(length(x) < 3, paste(x[1], x[2], sep = "_"),
paste(x[1], x[2], x[3], sep = "_"))
})
metadata$Sample.ID2 <- unlist(id_names)
}
return(metadata)
})
View(meta_files_data[[1]])
View(meta_files_data[[2]])
View(meta_files_data[[3]])
View(meta_files_data[[4]])
View(meta_files_data[[5]])
test <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
brokenR <- broken %>% dplyr::mutate(Retains = purrr::map(broken$data, function(.x) {
rt <- .x %>% retain(., make_decision = "mini")
cbind(.x, Retain = rt)
})
)
return(tidyr::unnest(brokenR))
})
View(meta_files_data[[1]])
View(test[[1]])
View(test[[5]])
test <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
brokenR <- broken %>% dplyr::mutate(Retains = purrr::map(broken$data, function(.x) {
rt <- .x %>% retain(., make_decision = "mini")
cbind(.x[, -X], Retain = rt)
})
)
return(tidyr::unnest(brokenR))
})
test <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
brokenR <- broken %>% dplyr::mutate(Retains = purrr::map(broken$data, function(.x) {
rt <- .x %>% retain(., make_decision = "mini")
cbind(.x[, -c("X")], Retain = rt)
})
)
return(tidyr::unnest(brokenR))
})
test <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
brokenR <- broken %>% dplyr::mutate(Retains = purrr::map(broken$data, function(.x) {
rt <- .x %>% mutate(Retain = retain(.x, make_decision = "mini"))
#cbind(.x, Retain = rt)
})
)
return(tidyr::unnest(brokenR))
})
View(test[[1]])
View(test[[4]])
View(test[[5]])
rm(test)
meta_files_retain <- lapply(meta_files_data, function(y) {
broken <- y %>% dplyr::group_by(Sample.ID2) %>% tidyr::nest()
brokenR <- broken %>% dplyr::mutate(Retains = purrr::map(broken$data, function(.x) {
rt <- .x %>% dplyr::mutate(Retain = retain(.x, make_decision = "mini"))
#cbind(.x, Retain = rt)
})
)
return(tidyr::unnest(brokenR))
})
View(meta_files_retain[[1]])
lapply(metafiles[2:length(metafiles)], function(x) {
inside <- list.files(x, full.names = T)
fcs.ext <- which(tools::file_ext(inside) == "fcs" )
fcs.toberead <- inside[fcs.ext]
#if(length(fcs.ext) == 1) {
# metadata <-
#} else {
#}
})
View(meta_files_retain[[2]])
sapply(meta_files_retain[[2]], class)
sapply(meta_files_retain[[4]], class)
View(meta_files_retain[[4]])
lapply(metafiles[2:length(metafiles)], function(x) {
inside <- list.files(x, full.names = T)
fcs.ext <- which(tools::file_ext(inside) == "fcs" )
fcs.toberead <- inside[fcs.ext]
#if(length(fcs.ext) == 1) {
# metadata <-
#} else {
#}
})
lapply(c(1, 5 ,6 2, 3), print)
lapply(c(1, 5 ,6, 2, 3), print)
fcs_files_data <- map2(.x = metafiles[2:length(metafiles)], .y = meta_files_retain,
function(.x, .y) {
inside <- list.files(.x, full.names = T)
fcs.ext <- which(tools::file_ext(inside) == "fcs" )
fcs.toberead <- inside[fcs.ext]
Retained <- .y %>% dplyr::filter(Retain == "Retain")
fcs.files <- lapply(1:nrow(Retained), function(i) {
fcs_data <- read.FCS(fcs.toberead[Retained$File1[i]], alter.names = TRUE,
transformation = FALSE,
emptyValue = FALSE,
dataset = Retained$Sample.Number[i])
})
#<- sapply()
})
fcs_files_data[[1]][[1]]
keyword(fcs_files_data[[1]][[1]], "GTI$SAMPLEID")
keyword(fcs_files_data[[1]][[2]], "GTI$SAMPLEID")
View(meta_files_retain[[1]])
library(maps)
install.packages("maps")
plot(fcs_files_data[[1]][[2]]@exprs[,"RED.B.HLin"], fcs_files_data[[1]][[2]]@exprs[,"YEL.B.HLin"], pch = ".")
fcs_files_data <- map2(.x = metafiles[2:length(metafiles)], .y = meta_files_retain,
function(.x, .y) {
inside <- list.files(.x, full.names = T)
fcs.ext <- which(tools::file_ext(inside) == "fcs" )
fcs.toberead <- inside[fcs.ext]
Retained <- .y %>% dplyr::filter(Retain == "Retain")
fcs.files <- lapply(1:nrow(Retained), function(i) {
fcs_data <- read.FCS(fcs.toberead[Retained$File1[i]],
alter.names = TRUE,
transformation = FALSE,
emptyValue = FALSE,
dataset = Retained$Sample.Number[i])
})
keys <- sapply(fcs.files, keyword, "GTI$SAMPLEID")
names(fcs.files) <- keys
as(fcs.files, "flowSet")
})
names(fcs_files_data[[1]])
fcs_files_data[[1]][[1]]
View(retain)
